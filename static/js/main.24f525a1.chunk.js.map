{"version":3,"sources":["Components/Wrapper/Wrapper.module.css","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Statistics/Statistics.jsx","Components/Notification/Notification.jsx","Components/Section/Section.jsx","Components/Wrapper/Wrapper.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","ListGroup","horizontal","map","val","style","marginLeft","Button","variant","type","onClick","shortid","generate","Statictic","good","neutral","bad","total","positiveFeedback","Item","ProgressBar","now","label","animated","Notification","message","Section","title","children","Wrapper","state","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","className","s","container","Object","keys","this","values","find","Math","round","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24f525a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wrapper_container__3jhgk\"};","import shortid from 'short-id';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Button, ListGroup } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import s from './FeedbackOptions.modules.css';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <>\r\n      <ul>\r\n        <ListGroup horizontal>\r\n          {options.map(val => (\r\n            <li style={{ marginLeft: '18px' }} key={shortid.generate()}>\r\n              <Button\r\n                variant=\"outline-info\"\r\n                type=\"button\"\r\n                onClick={() => onLeaveFeedback(val)}\r\n              >\r\n                {val}\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ListGroup>\r\n        {/* <li key={shortid.generate()}>\r\n          <button type=\"button\" onClick={() => onLeaveFeedback('good')}>\r\n            Good\r\n          </button>\r\n          <button type=\"button\" onClick={() => onLeaveFeedback('neutral')}>\r\n            Neutral\r\n          </button>\r\n          <button type=\"button\" onClick={() => onLeaveFeedback('bad')}>\r\n            Bad\r\n          </button>\r\n        </li> */}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport { FeedbackOptions };\r\n","// import s from './Statistic.module.css';\r\n// import { labels } from '../Utils/labels';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'short-id';\r\nimport { ProgressBar, ListGroup } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Statictic({ good, neutral, bad, total, positiveFeedback }) {\r\n  return (\r\n    <>\r\n      <ListGroup>\r\n        <ul>\r\n          {/* {labels.map(label => (\r\n          <li key={shortid.generate()}>{label} :</li>\r\n        ))} */}\r\n          <li key={shortid.generate()}>\r\n            <ListGroup.Item>\r\n              <ProgressBar variant=\"info\" now={good} label=\"%\" />\r\n              Good: {good}\r\n            </ListGroup.Item>\r\n          </li>\r\n\r\n          <li key={shortid.generate()}>\r\n            <ListGroup.Item>\r\n              <ProgressBar now={neutral} label=\"%\" variant=\"success\" />\r\n              Neutral: {neutral}\r\n            </ListGroup.Item>\r\n          </li>\r\n\r\n          <li key={shortid.generate()}>\r\n            <ListGroup.Item>\r\n              <ProgressBar animated now={bad} label=\"%\" variant=\"danger\" />\r\n              Bad: {bad}\r\n            </ListGroup.Item>\r\n          </li>\r\n          <li key={shortid.generate()}>Total: {total}</li>\r\n          <li key={shortid.generate()}>\r\n            Positive Feedback: {positiveFeedback} %\r\n          </li>\r\n        </ul>\r\n      </ListGroup>\r\n    </>\r\n  );\r\n}\r\n\r\nStatictic.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positiveFeedback: PropTypes.number,\r\n};\r\n\r\nexport { Statictic };\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nexport { Notification };\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","// import s from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport { Section };\r\n","import React from 'react';\r\nimport { FeedbackOptions } from '../FeedbackOptions/FeedbackOptions';\r\nimport { Statictic } from '../Statistics/Statistics';\r\nimport { Notification } from '../Notification/Notification';\r\nimport { Section } from '../Section/Section';\r\n\r\nimport s from './Wrapper.module.css';\r\n\r\nclass Wrapper extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  // Функция увеличение значения State\r\n  onLeaveFeedback = val => {\r\n    this.setState(prevState => ({ [val]: prevState[val] + 1 }));\r\n  };\r\n\r\n  // Функция подсчета количества отзывов\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.neutral + this.state.bad;\r\n\r\n  // Функция вывода % позитивных отзывов (good & neutral)\r\n  countPositiveFeedbackPercentage = () =>\r\n    ((this.state.good + this.state.neutral) / this.countTotalFeedback()) * 100;\r\n\r\n  render() {\r\n    return (\r\n      <div className={s.container}>\r\n        <Section title=\"Please leave feedbak\">\r\n          <FeedbackOptions\r\n            options={Object.keys(this.state)}\r\n            onLeaveFeedback={this.onLeaveFeedback}\r\n          />\r\n        </Section>\r\n\r\n        {Object.values(this.state).find(val => val !== 0) ? (\r\n          <Section title=\"Statistics\">\r\n            <Statictic\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={this.countTotalFeedback()}\r\n              positiveFeedback={Math.round(\r\n                this.countPositiveFeedbackPercentage(),\r\n              )}\r\n            />\r\n          </Section>\r\n        ) : (\r\n          <Section>\r\n            <Notification message=\"No feedback given\" />\r\n          </Section>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Wrapper };\r\n","import { Wrapper } from './Components/Wrapper/Wrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}